generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id         Int         @id @default(autoincrement())
  userId     Int
  latitude   Decimal     @db.Decimal(10, 7)
  longitude  Decimal     @db.Decimal(10, 7)
  name       String
  address    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  type       AddressType
  User       User        @relation(fields: [userId], references: [id])
  Booking    Booking[]

  @@index([userId])
}

model Admin {
  id           Int       @id @default(autoincrement())
  name         String
  email        String?
  mobileNumber String
  passwordHash String
  role         String
  status       String    @default("active")
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  bookingId          Int           @id @default(autoincrement())
  userId             Int
  addressId          Int
  serviceId          Int
  workerId           Int

  bookingDatetime    DateTime
  bookingSlot        String
  bookingType        BookingType
  duration           Int?

  basePrice          Decimal       @db.Decimal(10, 2)
  discount           Decimal       @default(0.00) @db.Decimal(10, 2)
  gst                Decimal       @default(0.00) @db.Decimal(10, 2)
  platformFee        Decimal       @default(0.00) @db.Decimal(10, 2)
  finalAmountPaid    Decimal       @db.Decimal(10, 2) 

  paymentMethod      String?
  paymentStatus      String        @default("pending")
  bookingStatus      String        @default("pending")
  cancellationReason String?
  refundStatus       String        @default("none")
  refundAmount       Decimal       @default(0.00) @db.Decimal(10, 2)
  refundDate         DateTime?
  refundReason       String?

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  Address            Address       @relation(fields: [addressId], references: [id])
  Service            Service       @relation(fields: [serviceId], references: [id])
  User               User          @relation(fields: [userId], references: [id])
  Worker             Worker        @relation(fields: [workerId], references: [id])
  Review             Review[]
  Transaction        Transaction[]
}

enum BookingType {
  once
  weekly
  monthly
}

model CreditsTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Decimal  @db.Decimal(10, 2)
  balance     Decimal  @db.Decimal(10, 2)
  type        String
  description String?
  reference   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
}

model DailySummary {
  summaryDate   DateTime @id
  totalBookings Int      @default(0)
  totalRevenue  Decimal  @default(0.00) @db.Decimal(10, 2)
  totalRefunds  Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GeoFence {
  id          Int      @id @default(autoincrement())
  name        String
  polygon     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Otp {
  id        Int      @id @default(autoincrement())
  mobNo     String
  otp       String
  reference String
  createdAt DateTime @default(now())
  expiry    DateTime @default(dbgenerated("(now() + '00:05:00'::interval)"))
  attempts  Int      @default(0)
  isUsed    Boolean  @default(false)
  ipAddress String?

  @@index([isUsed])
  @@index([mobNo])
}



model Promotion {
  couponId      Int      @id @default(autoincrement())
  service_id    Int
  code          String   @unique
  description   String?
  discountValue Decimal  @db.Decimal(10, 2)
  validFrom     DateTime
  validUntil    DateTime
  usageLimit    Int
  createdAt     DateTime @default(now())
  Service       Service  @relation(fields: [service_id], references: [id])
}

model Referral {
  referralId                     Int      @id @default(autoincrement())
  referrerId                     Int
  referredId                     Int
  referralDate                   DateTime @default(now())
  rewardAmount                   Decimal  @default(0.00) @db.Decimal(10, 2)
  status                         String   @default("pending")
  User_Referral_referredIdToUser User     @relation("Referral_referredIdToUser", fields: [referredId], references: [id])
  User_Referral_referrerIdToUser User     @relation("Referral_referrerIdToUser", fields: [referrerId], references: [id])
}

model Review {
  reviewId  Int      @id @default(autoincrement())
  bookingId Int
  userId    Int
  workerId  Int
  rating    Decimal  @db.Decimal(3, 2)
  comment   String?
  createdAt DateTime @default(now())
  Booking   Booking  @relation(fields: [bookingId], references: [bookingId])
  User      User     @relation(fields: [userId], references: [id])
  Worker    Worker   @relation(fields: [workerId], references: [id])
}

model Salary {
  salaryId    Int      @id @default(autoincrement())
  workerId    Int
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Worker      Worker   @relation(fields: [workerId], references: [id])
}

model Service {
  id           Int            @id @default(autoincrement())
  name         String
  image        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Booking      Booking[]
  Promotion    Promotion[]
  ServicePrice ServicePrice[]
}

model ServicePrice {
  id         Int       @id @default(autoincrement())
  serviceId  Int
  price      Decimal   @db.Decimal(10, 2)
  startDate  DateTime
  endDate    DateTime?
  reason     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime @updatedAt
  Service    Service   @relation(fields: [serviceId], references: [id])
}

model Session {
  sessionId  Int      @id @default(autoincrement())
  userId     Int
  token      String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  ipAddress  String?
  deviceInfo String?
  User       User     @relation(fields: [userId], references: [id])
}

model Transaction {
  transactionId         Int      @id @default(autoincrement())
  bookingId             Int
  userId                Int
  transactionDate       DateTime @default(now())
  amount                Decimal  @db.Decimal(10, 2)
  paymentMethod         String
  paymentStatus         String   @default("pending")
  externalTransactionId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  Booking               Booking  @relation(fields: [bookingId], references: [bookingId])
  User                  User     @relation(fields: [userId], references: [id])
}

model User {
  id                                 Int                  @id @default(autoincrement())
  name                               String
  mobileNumber                       String               @unique
  email                              String?              @unique
  referralCode                       String?
  credits                            Decimal              @default(0.00) @db.Decimal(10, 2)
  createdAt                          DateTime             @default(now())
  updatedAt                          DateTime             @updatedAt
  Address                            Address[]
  Booking                            Booking[]
  CreditsTransaction                 CreditsTransaction[]
  Referral_Referral_referredIdToUser Referral[]           @relation("Referral_referredIdToUser")
  Referral_Referral_referrerIdToUser Referral[]           @relation("Referral_referrerIdToUser")
  Review                             Review[]
  Session                            Session[]
  Transaction                        Transaction[]
  VisitorLocationLog                 VisitorLocationLog[]

  ContactMessage ContactMessage[]
}

model VisitorLocationLog {
  id        Int      @id @default(autoincrement())
  address   String?  
  userId    Int?
  latitude  Decimal  @db.Decimal(10, 7)
  longitude Decimal  @db.Decimal(10, 7)
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Worker {
  id                          Int       @id @default(autoincrement())
  name                        String
  mobileNumber                String    @unique
  email                       String?   @unique
  serviceType                 String
  bio                         String?
  profilePicture              String?
  rating                      Decimal   @default(0.00) @db.Decimal(3, 2)
  skills                      String?
  specialisations             String?
  govtId                      String
  govtIdPicture               String
  legalJoiningDocumentPicture String
  salary                      Decimal   @db.Decimal(10, 2)
  joiningDate                 DateTime
  status                      String    @default("active")
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  Booking                     Booking[]
  Review                      Review[]
  Salary                      Salary[]
}

enum AddressType {
  home
  work
  other
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  userId    Int?     
  heading   String
  body      String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id])
}

model WaitlistEntry { 
  id            Int       @id @default(autoincrement()) 
  name          String 
  mobileNumber  String    @unique 
  status        String    @default("pending") 
  createdAt     DateTime  @default(now()) 
  visitorLogId  Int? 
  visitorLog    WaitlistVisitorLocationLog? @relation(fields: [visitorLogId], references: [id]) 
}

model WaitlistVisitorLocationLog {
  id              Int      @id @default(autoincrement())
  address         String?
  latitude        Decimal  @db.Decimal(10, 7)
  longitude       Decimal  @db.Decimal(10, 7)
  ip              String?
  userAgent       String?
  platform        String?
  language        String?
  screenResolution String?
  deviceName      String?
  model           String?
  createdAt       DateTime @default(now())

  WaitlistEntry WaitlistEntry[]
}